import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
import tensorflow as tf
from keras.datasets import mnist
from PIL import Image
from keras.utils import to_categorical

# -----------------------------

# DATA

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((60000,28,28,1))
x_train = x_train.astype('float32') / 255.0
x_test = x_test.reshape((10000,28,28,1))
x_test = x_test.astype('float32') / 255.0
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
# -----------------------------
# MODEL
model = Sequential()
model.add(layers.Conv2D(32,(2,2),activation='relu',input_shape=(28,28,1)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(32,(2,2),activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Flatten())
model.add(layers.Dense(128,activation='sigmoid'))
model.add(layers.Dropout(0.25))
model.add(layers.BatchNormalization())
model.add(layers.Dense(10,activation='sigmoid'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
model.fit(x_train,y_train,epochs=10,batch_size=80)
# -----------------------------
# PREDICTION
prediction = model.predict(x_test)
prediction = np.argmax(prediction,axis=1)

test_accuracy = model.evaluate(x_test, y_test)
print("Test Accuracy:", test_accuracy)
# -----------------------------
# SAVE  
with open('number_model_three', 'wb') as f:
    pickle.dump(model, f)
# -----------------------------
# TEST
while True:
    index = np.random.randint(0,9999)
    prediction_index = prediction[index]
    target_index = np.argmax(y_test[index])
    pixel_values = np.array(x_test[index])
    pixel_values = pixel_values.reshape((28,28))
    pixel_values = (pixel_values * 255).astype(np.uint8)
    image = Image.fromarray(pixel_values)
    plt.imshow(image,cmap='Greys')
    plt.title(f'Target: {target_index} Prediction: {prediction_index}')
    plt.show()
# -----------------------------
