model = Sequential()
model.add(layers.Conv2D(32, (2, 2), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.15))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.BatchNormalization())
model.add(layers.Conv2D(32, (2, 2), activation='relu'))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.15))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.BatchNormalization())
model.add(layers.Dense(128, activation='sigmoid'))
model.add(layers.BatchNormalization())
model.add(layers.Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, batch_size=64)



###########################################





prediction = model.predict(x_test)
labels = ['Flugzeug', 'Auto', 'Vogel', 'Katze', 'Reh', 'Hund', 'Frosch', 'Pferd', 'Schiff', 'LKW']
while True:
  index = np.random.randint(0,9999)
  prediction_index = np.argmax(prediction[index])
  prediction_value = labels[prediction_index]
  target_index = y_test[index]
  target_index = int(target_index)
  target_value = labels[target_index]
  pixel_values = np.array(x_test[index])
  pixel_values = pixel_values.reshape((32,32,3))
  pixel_values = (pixel_values * 255).astype(np.uint8)
  image = Image.fromarray(pixel_values)
  plt.imshow(image)
  plt.title(f"Prediction: {prediction_value}, Target: {target_value}")
  plt.show()
